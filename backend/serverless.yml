service:
  name: cedit

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin
  - serverless-plugin-existing-s3

# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    SIGNED_URL_EXPIRATION: 300
    TABLE_PAGE: cedit-Page-${self:provider.stage}
    TABLE_LINE: cedit-Line-${self:provider.stage}
    TABLE_EDIT: cedit-Edit-${self:provider.stage}
    S3_BUCKET_PAGE_UPLOAD: cedit-page-upload-424780530116-${self:provider.stage}
    S3_BUCKET_OCR_OUTPUT: cedit-ocr-output-424780530116-${self:provider.stage}
    S3_BUCKET_LINE_IMAGES: cedit-line-images-424780530116-${self:provider.stage}
    AWS_XRAY_CONTEXT_MISSING: 'LOG_ERROR'
    TEXTRACT_DONE_ROLE_ARN: arn:aws:iam::424780530116:role/cedit-TextractDoneRole-${self:provider.stage}
    TEXTRACT_DONE_TOPIC_ARN: arn:aws:sns:us-east-1:424780530116:cedit-TextractDoneTopic-${self:provider.stage}


#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:GetBucketNotification"
#        - "s3:PutBucketNotification"
#      Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_PAGE_UPLOAD}/*'

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # The functions are divided into three main groups:
  # Pages, Lines, and Edits

  # ----------------------------------------------------
  # PAGE FUNCTIONS

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: pageupload
          cors: true
    iamRoleStatements:
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'


  GetAllPages:
    handler: src/lambda/http/getAllPages.handler
    events:
      - http:
          method: get
          path: getallpages
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'


  # This function is triggered when an image file is uploaded to the
  # incoming s3 bucket.
  RecognizePage:
    handler: src/lambda/s3/recognizePage.handler
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET_PAGE_UPLOAD}
          events:
            - s3:ObjectCreated:*
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - textract:StartDocumentAnalysis
        Resource:
          - '*'
      - Effect: "Allow"
        Action:
          - "s3:GetBucketNotification"
          - "s3:PutBucketNotification"
        Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_PAGE_UPLOAD}/*'


  # This function does the same thing as RecognizePage, but it can be kicked
  # off manually with an http hit for development purposes.
  RecognizePageManual:
    handler: src/lambda/dev/recognizePageManual.handler
    events:
      - http:
          method: get
          path: recognizepagemanual/{key}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - textract:StartDocumentAnalysis
        Resource:
          - '*'


  # When Textract is done, it sends an SNS event which kicks off this function.
  RecognitionIsDone:
    handler: src/lambda/textract/recognitionIsDone.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.textractDoneTopicName}
          topicName: ${self:custom.textractDoneTopicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_OCR_OUTPUT}/*
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - textract:GetDocumentAnalysis
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}


  # This function does the same thing as RecognitionIsDone, but it can
  # be kicked off manually with an http hit for development purposes.
  RecognitionIsDoneManual:
    handler: src/lambda/dev/recognitionIsDoneManual.handler
    events:
      - http:
          method: get
          path: recognitionisdonemanual/{jobId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_OCR_OUTPUT}/*
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - textract:GetDocumentAnalysis
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}



  # ----------------------------------------------------
  # LINE FUNCTIONS

  # This is currently only for development purposes.
  GetAllLines:
    handler: src/lambda/dev/getAllLines.handler
    events:
      - http:
          method: get
          path: getalllines
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_LINE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  # This is also for development purposes.  It's a stub which
  # seeds the Line table with mocked-up data.  In a full implementation,
  # this data would be loaded automatically when OCR is completed on
  # a page.
  LoadFakeLineData:
    handler: src/lambda/dev/load_fake_line_data.handler
    events:
      - http:
          method: get
          path: loadfakelinedata
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_LINE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'



  # ----------------------------------------------------
  # EDIT FUNCTIONS



  GetNextEdit:
    handler: src/lambda/http/getNextEdit.handler
    events:
      - http:
          method: get
          path: getnextedit
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_LINE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'


  SubmitEditAndGetNext:
    handler: src/lambda/http/submitEdit.handler
    events:
      - http:
          method: post
          path: edit
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Submit an edited line
            description: Submit an edited line
            requestModels:
              'application/json': SubmitEditRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_EDIT}
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_LINE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'


  # Mark an edit as rejected.  A moderator or admin would use this
  # function.
  UpdateEdit:
    handler: src/lambda/http/updateEdit.handler
    events:
      - http:
          method: patch
          path: edit/{editId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_EDIT}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  # Fully delete an edit record, in case a malicious user has
  # submitted something truly unacceptable such as copyrighted
  # material
  DeleteEdit:
    handler: src/lambda/http/deleteEdit.handler
    events:
      - http:
          method: delete
          path: edit/{editId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_EDIT}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'


  # This is currently for development purposes.
  GetAllEdits:
    handler: src/lambda/dev/getAllEdits.handler
    events:
      - http:
          method: get
          path: getalledits
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_EDIT}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'


  # ----------------------------------------------------
  # OTHER DEV FUNCTIONS

  # A throwaway function for whatever temporary code is needed.
  TestHandler:
    handler: src/lambda/dev/testHandler.handler
    events:
      - http:
          method: get
          path: testhandler
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'



custom:
  textractDoneTopicName: cedit-TextractDoneTopic-${self:provider.stage}

  serverless-offline:
    port: 3003

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: SubmitEditRequest
        contentType: application/json
        schema: ${file(models/submit-edit-request.json)}




resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false



    PageDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: pageId
            AttributeType: S
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
          - AttributeName: pageId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_PAGE}



    LineDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: lineId
            AttributeType: S
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
          - AttributeName: lineId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_LINE}


    EditDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: editId
            AttributeType: S
        KeySchema:
          - AttributeName: bookId
            KeyType: HASH
          - AttributeName: editId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_EDIT}


    TextractDoneTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Textract done topic
        TopicName: ${self:custom.textractDoneTopicName}


    TextractDoneRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: cedit-TextractDoneRole-${self:provider.stage}
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement: 
            - Effect: Allow
              Principal:
                Service:
                  - textract.amazonaws.com
                  - lambda.amazonaws.com
              Action: 
                - sts:AssumeRole
        Policies:
          - PolicyName: cedit-TextractDonePolicyName-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: ${self:provider.environment.TEXTRACT_DONE_TOPIC_ARN}


    # -----------------------------------------------------

    PageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_PAGE_UPLOAD}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    PageUploadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: PageUploadBucketPolicyId
          Version: "2012-10-17"
          Statement:
            - Sid: PageUploadPublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_PAGE_UPLOAD}/*'
        Bucket: !Ref PageUploadBucket


    # -----------------------------------------------------



    OcrOutputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_OCR_OUTPUT}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    OcrOutputBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: OcrOutputBucketPolicyId
          Version: "2012-10-17"
          Statement:
            - Sid: OcrOutputPublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_OCR_OUTPUT}/*'
        Bucket: !Ref OcrOutputBucket


    # -----------------------------------------------------


    LineImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_LINE_IMAGES}
        # existing: true
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    LineImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: LineImagesBucketPolicyId
          Version: "2012-10-17"
          Statement:
            - Sid: LineImagesPublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_LINE_IMAGES}/*'
        Bucket: !Ref LineImagesBucket
