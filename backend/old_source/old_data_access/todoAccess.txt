import * as AWS from 'aws-sdk'
import * as AWSXRay from 'aws-xray-sdk'

import { DocumentClient } from 'aws-sdk/clients/dynamodb'

import { createLogger } from '../utils/logger'
import { TodoItem } from '../models/TodoItem'
import { TodoUpdate } from '../models/TodoUpdate'

const XAWS = AWSXRay.captureAWS(AWS)
const logger = createLogger('todos')
const bucketName = process.env.IMAGES_S3_BUCKET



export class TodoAccess {

  constructor(
    private readonly docClient: DocumentClient = createDynamoDBClient(),
    private readonly todoTable = process.env.TODO_TABLE) {
  }


  async getAllTodoItems(userId: string): Promise<TodoItem[]> {
    logger.info('Data access layer is getting all todo items')

    const result = await this.docClient.query({
      TableName: this.todoTable,
      KeyConditionExpression: 'userId = :userId',
      ExpressionAttributeValues: {
        ':userId': userId
      }
    }).promise()


    const items = result.Items
    return items as TodoItem[]
  }

  async createTodoItem(todo: TodoItem): Promise<TodoItem> {
    logger.info('Data access layer is creating an item')

    await this.docClient
      .put({
        TableName: this.todoTable,
        Item: todo
      })
      .promise()


    return todo
  }


  async deleteTodoItem(userId: string, todoId: string): Promise<boolean> {
    logger.info('Data access layer is deleting an item')

    await this.docClient
      .delete({
        TableName: this.todoTable,
        Key: {
          todoId: todoId,
	  userId: userId
        }
      })
      .promise()


    return true
  }


  async updateTodoItem(userId: string, todoId: string, todoUpdate: TodoUpdate): Promise<boolean> {
    await this.generalizedUpdate(userId, todoId, todoUpdate)

    return true
  }



  async addAttachmentUrlToTodoItem(userId: string, todoId: string, imageId: string): Promise<boolean> {
    const sourceObject = {
      attachmentUrl: `https://${bucketName}.s3.amazonaws.com/${imageId}`
    }

    await this.generalizedUpdate(userId, todoId, sourceObject)

    return true
  }



  async generalizedUpdate(userId: string, todoId: string, sourceObject: object): Promise<boolean> {
    logger.info('Data access layer is updating an existing item')
    
    var changingTodoItem = await this.fetchTodoItem(userId, todoId)

    Object.assign(changingTodoItem, sourceObject)

    await this.docClient
      .put({
        TableName: this.todoTable,
        Item: changingTodoItem
      })
      .promise()


    return true
  }



  async fetchTodoItem(userId: string, todoId: string): Promise<TodoItem> {

    const result = await this.docClient
      .get({
        TableName: this.todoTable,
        Key: {
          todoId: todoId,
	  userId: userId
        }
      })
      .promise()

    return result.Item as TodoItem
  }


  async todoItemExists(userId: string, todoId: string): Promise<boolean> {

    const result = await this.docClient
      .get({
        TableName: this.todoTable,
        Key: {
          todoId: todoId,
	  userId: userId
        }
      })
      .promise()

    return !!result.Item
  }


}


function createDynamoDBClient() {
  if (process.env.IS_OFFLINE) {
    logger.info('Data access layer is creating a local DynamoDB instance')
    return new XAWS.DynamoDB.DocumentClient({
      region: 'localhost',
      endpoint: 'http://localhost:8000'
    })
  }

  return new XAWS.DynamoDB.DocumentClient()
}


