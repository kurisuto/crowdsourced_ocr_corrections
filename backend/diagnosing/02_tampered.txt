service:
  name: coc

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TABLE_PAGE: COC-Page-${self:provider.stage}
    TABLE_LINE: COC-Line-${self:provider.stage}
    TABLE_EDIT: COC-Edit-${self:provider.stage}
    S3_BUCKET_PAGE_UPLOAD: coc-page-upload-424780530116-${self:provider.stage}
    S3_BUCKET_OCR_OUTPUT: coc-ocr-output-424780530116-${self:provider.stage}
    S3_BUCKET_LINE_IMAGES: coc-line-images-424780530116-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AWS_XRAY_CONTEXT_MISSING: 'LOG_ERROR'
    TEXTRACT_SNS_ROLE_ARN: arn:aws:iam::424780530116:role/TempAllowTextractToWriteToSNS
    TEXTRACT_SNS_ARN: arn:aws:sns:${self:provider.region}:${self:custom.accountId}:${self:custom.textractDoneTopicName}
    SNS_FULL_ACCESS_ROLE_NAME: ${self:custom.snsFullAccessRoleName}

#     !GetAtt snsAccessRole.Arn

#     ${snsAccessRole.Arn}
#     ${self:custom.SNSTopicPolicyArn}


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todosi
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo item
            description: Create a new todo item
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update todo item
            description: Update todo item
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: pageupload
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'

  RecognizePage:
    handler: src/lambda/http/recognizePage.handler
    events:
      - http:
          method: get
          path: recognizepage
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
      - Effect: 'Allow' # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource: arn:aws:sns:us-east-1:424780530116:tornado_warning


  RecognitionIsDone:
    handler: src/lambda/http/recognitionIsDone.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.textractDoneTopicName}
          topicName: ${self:custom.textractDoneTopicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - SNS:Publish
        Resource: arn:aws:sns:us-east-1:424780530116:tornado_warning

#  TestHandler:
#    handler: src/lambda/http/testHandler.handler
#    events:
#      - http:
#          method: get
#          path: testhandler
#          cors: true
#    iamRoleStatements:
#      - Effect: Allow
#        Action:
#          - dynamodb:PutItem
#          - dynamodb:GetItem
#          - dynamodb:Query
#        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PAGE}
#      - Effect: 'Allow' # xray permissions (required)
#        Action:
#          - xray:PutTraceSegments
#          - xray:PutTelemetryRecords
#        Resource:
#          - '*'
#      - Effect: Allow
#        Action:
#          - SNS:Publish
#        Resource: arn:aws:sns:us-east-1:424780530116:tornado_warning




custom:
  textractDoneTopicName: textractDoneTopic-${self:provider.stage}
  snsFullAccessRoleName: AwsSnsFullAccessRole${self:custom.accountId}${self:provider.stage}

  # TODO: Find out how to get this programatically!
  accountId: 424780530116
  
  # SNSTopicPolicyArn: !GetAtt SNSTopicPolicy.Arn
  
  serverless-offline:
    port: 3003

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Udagram API
        description: Serverless application for images sharing
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}



resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false



    PageDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_PAGE}


    PageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_PAGE_UPLOAD}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    OcrOutputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_OCR_OUTPUT}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    PageUploadBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_PAGE_UPLOAD}/*'
        Bucket: !Ref PageUploadBucket

    OcrOutputBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadWriteBucketPolicy
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_OCR_OUTPUT}/*'
        Bucket: !Ref OcrOutputBucket



    TextractDoneTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Textract done topic
        TopicName: ${self:custom.textractDoneTopicName}

    snsAccessRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.snsFullAccessRoleName}
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - textract.amazonaws.com
            Action:
            - sts:AssumeRole


#    SNSTopicPolicy:
#      Type: AWS::SNS::TopicPolicy
#      Properties:
#        PolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#            - Effect: Allow
#              Principal:
#                AWS: "*"
#              Action: sns:Publish
#              Resource:
#                !Ref TextractDoneTopic
#        Topics:
#          - !Ref TextractDoneTopic

